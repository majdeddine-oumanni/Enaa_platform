package com.aprenant.aprenantservice.Service;

import com.aprenant.aprenantservice.DTO.BriefDTO;
import com.aprenant.aprenantservice.DTO.StudentDTO;
import com.aprenant.aprenantservice.FeignClientCalls.BriefCall;
import com.aprenant.aprenantservice.Mapper.StudentMapper;
import com.aprenant.aprenantservice.Model.Student;
import com.aprenant.aprenantservice.Repository.StudentRepository;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class StudentServiceTest {

    private final BriefCall briefCall = mock(BriefCall.class);
    private final StudentMapper studentMapper = mock(StudentMapper.class);
    private final StudentRepository studentRepository = mock(StudentRepository.class);
    private final StudentService studentService = new StudentService(briefCall, studentMapper, studentRepository);

    @Test
    void fetchBriefList() {
        // Mock BriefCall response
        BriefDTO brief1 = new BriefDTO();
        brief1.setName("Brief 1");
        brief1.setDescription("Description 1");

        BriefDTO brief2 = new BriefDTO();
        brief2.setName("Brief 2");
        brief2.setDescription("Description 2");

        when(briefCall.getBriefList()).thenReturn(List.of(brief1, brief2));

        // Test
        List<BriefDTO> result = studentService.fetchBriefList();

        // Verify
        assertEquals(2, result.size());
        assertEquals("Brief 1", result.get(0).getName());
        assertEquals("Brief 2", result.get(1).getName());
        verify(briefCall, times(1)).getBriefList();
    }

    @Test
    void addStudent() {
        // Input DTO
        StudentDTO inputDTO = new StudentDTO();
        inputDTO.setName("John");
        inputDTO.setEmail("john.doe@example.com");

        // Entity to be returned by mapper
        Student studentEntity = new Student();
        studentEntity.setName(inputDTO.getName());
        studentEntity.setEmail(inputDTO.getEmail());

        // Saved entity to be returned by repository (with generated ID)
        Student savedStudent = new Student();
        savedStudent.setName(inputDTO.getName());
        savedStudent.setEmail(inputDTO.getEmail());
        // ID would be generated by @GeneratedValue in actual implementation

        // Output DTO to be returned by mapper
        StudentDTO outputDTO = new StudentDTO();
        outputDTO.setName(savedStudent.getName());
        outputDTO.setEmail(savedStudent.getEmail());

        // Mocking
        when(studentMapper.toEntity(inputDTO)).thenReturn(studentEntity);
        when(studentRepository.save(studentEntity)).thenReturn(savedStudent);
        when(studentMapper.toDTO(savedStudent)).thenReturn(outputDTO);

        // Test
        StudentDTO result = studentService.addStudent(inputDTO);

        // Verify
        assertEquals(outputDTO.getName(), result.getName());
        assertEquals(outputDTO.getEmail(), result.getEmail());
        verify(studentMapper, times(1)).toEntity(inputDTO);
        verify(studentRepository, times(1)).save(studentEntity);
        verify(studentMapper, times(1)).toDTO(savedStudent);
    }

    @Test
    void getStudentList() {
        // Mock repository response
        Student student1 = new Student();
        student1.setName("Alice");
        student1.setEmail("alice.smith@example.com");

        Student student2 = new Student();
        student2.setName("Bob");
        student2.setEmail("bob.johnson@example.com");

        when(studentRepository.findAll()).thenReturn(List.of(student1, student2));

        // Mock mapper response
        StudentDTO dto1 = new StudentDTO();
        dto1.setName(student1.getName());
        dto1.setEmail(student1.getEmail());

        StudentDTO dto2 = new StudentDTO();
        dto2.setName(student2.getName());
        dto2.setEmail(student2.getEmail());

        when(studentMapper.toDTOs(List.of(student1, student2))).thenReturn(List.of(dto1, dto2));

        // Test
        List<StudentDTO> result = studentService.getStudentList();

        // Verify
        assertEquals(2, result.size());
        assertEquals("Alice", result.get(0).getName());
        verify(studentRepository, times(1)).findAll();
        verify(studentMapper, times(1)).toDTOs(List.of(student1, student2));
    }

    @Test
    void getStudentList_Empty() {
        // Mock empty repository response
        when(studentRepository.findAll()).thenReturn(List.of());

        // Mock empty mapper response
        when(studentMapper.toDTOs(List.of())).thenReturn(List.of());

        // Test
        List<StudentDTO> result = studentService.getStudentList();

        // Verify
        assertTrue(result.isEmpty());
        verify(studentRepository, times(1)).findAll();
        verify(studentMapper, times(1)).toDTOs(List.of());
    }
}